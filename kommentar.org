#+TITLE: Projekt Orion
#+AUTHOR: Jakob Klemm, Dominik Keller
#+LATEX_CLASS: report
#+IMAGE: ksba
#+LANGUAGE: de
#+OPTIONS: toc:t title:t date:nil
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[dvipsnames]{xcolor}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usepackage{pdfpages}
#+LATEX_HEADER: \usepackage[]{babel}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage[]{babel}
#+LATEX_HEADER: \usepackage[dvipsnames]{xcolor}
#+LATEX_HEADER: \usepackage{courier}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{textcomp}
#+LATEX_HEADER: \usepackage{gensymb}
\newpage

*Vorwort*\\
Die schriftliche Komponente der Maturaarbeit =Projekt Orion= besteht aus
drei verschiedenen Teilen. Da die behandelten Themen äusserst komplex
und umfangreich sind, verlangen verschiedene Abschnitte der Arbeit
verschiedenes Vorwissen und einen verschiedenen Zeitaufwand. Deswegen
wurde die schriftliche Komponente in drei Subkomponenten aufgeteilt,
wobei sie nach technischem Detailgrad sortiert sind. Wer nur ein
oberflächliches Verständnis über die Arbeiten und eine Analyse des
Umfelds will, ohne dabei zu technisch zu werden, muss nicht über den
Umfang dieses Dokuments hinaus. Aber für vollständigen Einblick in die
Errungenschaften und Konzepte muss mit einem grösseren Aufwand
gerechnet werden.
- Schriftlicher Kommentar: In diesem Dokument hier findet sich eine
  klassische Besprechung der Arbeit. Begonnen mit einer Zielsetzung
  und Besprechung verschiedener Projekte, bis zur Analyse des Produkts
  und einem Ausblick in die Zukunft gibt dieses Dokument einen guten,
  aber oberflächlichen Einblick in das =Projekt Orion=. Natürlich wird
  besonders bei der Analyse der existierenden Projekten und Darlegung
  des Konzepts gewisses technisches Know-How benötigt, aber es wurde
  versucht, alle Fachbegriffe zu umschreiben oder zu erklären. Wer nur
  über die Vision und den aktuellen Stand wissen will muss nicht über
  dieses Dokument hinaus, aber verschiedene Konzepte und nahezu die
  gesamte technische Umsetzung befinden sind nicht in diesem Dokument.
- Dokumentation: In dieser alleinstehenden Dokumentation, welche im
  Detailgrad zwischen dem schriftlichen Kommentar und der
  Code-Dokumentation steht, werden die Konzepte und Ideen besprochen.
  Wer die Entstehung und aktuelle Form der Komponenten genauer
  verstehen will, oder wer von den umgesetzten Funktionen profitieren
  will, sollte die Dokumentation durcharbeiten. Das Dokument ist eher
  umfangreich, es kann aber auch gut als eine Art Nachschlagewerk
  verwendet werden.
- Code: Neben der Dokumentation des Projekts und der Konzepte,
  existiert eine weitere Form der Dokumentation. Nahezu jede Funktion,
  jedes Modul und jedes Objekt über die verschiedenen /Crates/ sind
  dokumentiert. Diese Dokumentationen lassen sich nicht in einem
  klassisch strukturierten Dokument finden. Stattdessen ist die
  Code-Dokumentation online über automatisch generierte
  Rust-Dokumentation zu finden. Die Seiten mögen anfangs etwas
  unübersichtlich wirken, wer aber den Code von =Projekt Orion=
  verwenden will wird sich dort gut zurecht finden.

\newpage  
#+BEGIN_ABSTRACT
TODO: Abstract
#+END_ABSTRACT
\newpage

* Vision
** Grenzen
** Inhalte
** Routing
** Zentralisierung
** Orion
* Projekte
** Kademlia
** CJDNS
** IPFS
** Tox

Im Sommer 2013 veröffentlichte Edward Snowden schockierende
Geheimnisse über massive Spionage Prgogramme der NSA, mit welchen
nahezu aller digitaler Verkehr, ohne Rücksicht auf Datenschutz oder
Privatsphären mitgelesen, ausgewertet und gespeichert wurde. Nahezu
jede Person mit war betroffen und das genaue Ausmass ist bis heute
noch schwer greiffbar. Vielen wurde aber klar, dass sichere,
verschlüsselte Kommunikation nicht mehr nur etwas für Kriminelle und
/Nerds/ war, sondern dass jeder Zugang zu verschlüsselter, sicherer und
dezentraler Kommunikation haben sollte. In einem Thread auf 4chan
kamen wurden viele dieser Bedenken gesammelt und es kam die Idee auf,
selbst eine Alternative zu herrkömmlichen Chat Programmen wie Skype zu
entwickeln. Aus dieser Initiative heraus entstand =Tox=, wobei die Namen
vieler der ursprünglichen Entwickler bis heute unbekannt sind. Damals
war das Ziel die Entwicklung einer sicheren Alternative zu Skype zu
entwicklen, allerdings hat sich der Umfang des Projekts inzwischen
ausgeweitet. Im Zentrum der Arbeiten steht das =Tox Protocol=, welches
dann von verschiedenen, unabhängigen Programmen umgesetzt wird. Zwar
ist Chat weiterhin eine zentrale Funktion, es wird aber auch Video-
und Audiokommunikation sowie Filesharing gearbeitet.

Basierend auf der bekannten =NaCl=-Bibliothek wird die gesamte
Kommunikation über das =Tox Protocol= zwingend End- zu Endverschlüsselt.
Intern wird ein dezentrales Routing System basierend auf Kademila
verwendet, mit welchem Kontakt zwischen Nutzern (Freunden) aufgebaut
wird. Während im Kademila Whitepaper Addressen mit einer Länge von 20
Bytes definiert werden, nutzt =Tox= 32 Bytes. Dies vereinfacht die
Verschlüsselung stark, da =NaCl= Schlüssel verwendet, welche ebenfalls
32 Bytes lang sind. Nebst der eingesparten Verhandlung von Schlüsseln
und der zusätzlichen Kommunikation bindet diese Idee die
Verschlüsselung direkt stärker in das Routing System ein, denn es
werden keine zusätzlichen Informationen zum Verschlüsseln einer
Nachricht gebraucht und sie kann direkt mit der Addresse des Ziels
verschlüsselt werden.

Es ist allerdings wichtig festzustellen, dass =Tox= Kademila lediglich
als Router verwendet. Kontakt zwischen zwei Nutzern wird komplett
dezentral hergestellt, sobald diese sich allerdings gefunden haben
wechseln zu einer direkten Kommunikation über UDP. Zwar erlaubt diese
zweiteilung der Kommunikation schnellen Datenverkehr sobald sich zwei
Nutzer gefunden haben (so ist beispielsweise Video- und
Audiokommunikation möglich), es kommen aber auch einige neue Probleme
auf:
- Anders als beispielsweise im Darknet über das Onion-Routing von
  Aussen klar erkennbar, mit wem jemand kommuniziert. Natürlich ist
  der Inhalt weiterhin verschlüsselt, aber ein solches System setzt in
  erster Linie auf Sicherheit und Geschwindigkeit und nicht auf
  Anonymität.
- Auch muss man bedenken, dass nicht jedes Gerät im Internet in der
  Lage ist direkte Verbindungen mit jedem anderen Gerät aufzubauen.
  Besonders Firewalls können schnell zu Problemen führen. Um den
  Aufwand für die Nutzer zu minimieren wird =UDP hole punching=
  verwendet, allerdings existieren auch dafür gewisse Kriterien und
  Probeleme.

Das =Tox Protocol= bietet eine einheitliche Spezifikation mit der eine
grosse Auswahl an Problemen gelöst werden können. Wer eine sichere,
dezentrale Alternative zu Whatsapp sucht könnte an =Tox= gefallen
finden. Seit einigen Jahren gibt es aber Bedenken über die Sicherheit
und aktuelle Richtung des Projekts, sowie Berichte von internen
Konflikten, besonders im Zusammenhang mit Spendengeldern.

/Quellen:/
- https://nacl.cr.yp.to/
- https://tox.chat/
- https://toktok.ltd/spec.html
- https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf
- https://en.wikipedia.org/wiki/Hole_punching_(networking)
** Games
** Lisp
** Modularität
* Konzept
Tatsächlich wird hier hauptsächlich der zweite Teil einer grösseren
Arbeit beschrieben. Bereits im Abschnitt *Modularität* wurde der erste
Teil dieser Arbeit analysiert. Aus den Erfahrungen und Ideen während
der ersten Entwicklungsphase wurden in dieses, verbesserte Konzept
eingearbeitet. Eine der zentralsten Feststellungen ist die Frage der
Komplexität:
- In der Welt der angewandten Wissenschaften geniesst die Informatik
  einen besonderen Platz. Während die Ingeneurswissenschaften oftmals
  mit der Informatik verglichen werden, so gibt es doch eine zentrale
  Unterscheidung: 
* Prozess
** Modularität
** Präsentation
* Produkt
* Ausblick
** Verifizierung
** Balance
